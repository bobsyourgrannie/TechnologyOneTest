@page "/"
@using TechnologyOneTest.Data;
@inject NumberToTextService NumberToTextService;

<PageTitle>Number To Text</PageTitle>

<h1>Number To Text</h1>

<div class="row mb-2">
    <div class="col-md-3">
        <input type="number" class="form-control" @bind="InputValue" min="0" max="10000" />
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="SendRequestAsync">Submit Value</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(TextError))
{
    <div class="alert alert-warning">@TextError</div>
}

@if (!string.IsNullOrWhiteSpace(ResultText))
{

    <p>Result: @ResultText</p>
}

@code {
    private double? InputValue { get; set; }
    private string? ResultText { get; set; }
    private string? TextError { get; set; }

    public async Task SendRequestAsync()
    {
        TextError = null;
        ResultText = null;

        if (InputValue == null)
        {
            TextError = "Please enter a number and try again";
            return;
        }

        try
        {
            // perform some UI level rounding
            InputValue = Math.Round((double)InputValue, 2);
            ResultText = await NumberToTextService.GetNumberAsTextAsync((double)InputValue);
        }
        catch (ArgumentOutOfRangeException argEx)
        {
            TextError = argEx.Message;
        }
        catch (Exception e)
        {
            TextError = "An unknown error occurred";
        }
    }
}