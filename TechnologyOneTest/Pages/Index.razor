@page "/"
@using TechnologyOneTest.Data;
@inject NumberToTextService NumberToTextService;

<PageTitle>Number To Text</PageTitle>

<h1>Number To Text</h1>

<p>Enter a number from 0 to less than one billion then click the Submit button to see it's currency text representation.</p>

<div class="row mb-2">
    <div class="col-md-3">
        <input type="number" class="form-control mb-2" @bind="InputValue" min="0" max="999999999.99" step=".01" />
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="SendRequestAsync">Submit</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(TextError))
{
    <div class="alert alert-warning">@TextError</div>
}

@if (!string.IsNullOrWhiteSpace(ResultText))
{
    <div class="alert alert-success">@ResultText</div>
}

@code {
    private double? _inputValue;
    private double? InputValue
    {
        get
        {
            return _inputValue;
        }
        set
        {
            ResultText = null;
            _inputValue = RoundInputValue(value);
        }
    }

    //private double? InputValue { get; set; }
    private string? ResultText { get; set; }
    private string? TextError { get; set; }

    public async Task SendRequestAsync()
    {
        TextError = null;
        ResultText = null;

        if (!InputValue.HasValue)
        {
            TextError = "Please enter a number and try again";
            return;
        }

        try
        {
            // perform some UI level rounding
            InputValue = Math.Round((double)InputValue, 2);
            ResultText = await NumberToTextService.GetNumberAsTextAsync((double)InputValue);
        }
        catch (ArgumentOutOfRangeException argEx)
        {
            TextError = argEx.Message;
        }
        catch (Exception e)
        {
            TextError = "An unknown error occurred";
        }
    }

    public double? RoundInputValue(double? value)
    {
        if (value.HasValue)
        {
            return Math.Round((double)value, 2);
        }
        else
        {
            return null;
        }
    }

    public void InputFocused()
    {
        ResultText = null;
    }
}